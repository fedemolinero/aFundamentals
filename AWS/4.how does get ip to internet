When you enter an **IP address** (for example, `http://192.168.1.1`) into a web browser, the browser follows a series of steps to establish a connection with the **web server** and retrieve the content. Here's a step-by-step breakdown of how this process works:

### 1. **DNS Resolution (If using Domain Name)**
   - If you enter a **domain name** like `www.example.com` instead of an IP address, the browser first needs to resolve the domain name into an IP address. This is done by querying a **DNS (Domain Name System)** server.
   - Since you’ve entered an IP address directly, this step is skipped. However, if you're using a domain, the browser will contact a DNS resolver to look up the domain’s corresponding IP.

### 2. **Establishing a TCP Connection**
   - Once the browser knows the IP address (whether from DNS resolution or if you’ve directly entered the IP address), it needs to establish a **TCP connection** to the server on port 80 (for **HTTP**) or port 443 (for **HTTPS**).
   - The browser uses the **Transmission Control Protocol (TCP)** to ensure a reliable connection. This involves a **three-way handshake**:
     1. **SYN**: The browser (client) sends a request to the server to establish a connection.
     2. **SYN-ACK**: The server responds with an acknowledgment that it’s ready to establish the connection.
     3. **ACK**: The browser acknowledges and the connection is established.

   - For HTTPS connections (port 443), this is followed by a **TLS/SSL handshake** to securely encrypt the data exchanged between the browser and the server.

### 3. **Sending the HTTP Request**
   - After the TCP (and possibly TLS) connection is established, the browser sends an **HTTP request** to the server. This request will contain the following information:
     - **HTTP Method**: Typically a `GET` request, asking the server to send a specific resource (like a webpage).
     - **Host Header**: Specifies the domain name or IP address of the server. If you use an IP address directly, the request will still contain that IP.
     - **Path**: The specific resource you are requesting (e.g., `/index.html`).
     - **Other headers**: Such as the browser’s `User-Agent` string, cookies, language preferences, etc.

     Example of an HTTP request:
     ```
     GET / HTTP/1.1
     Host: 192.168.1.1
     Accept: text/html
     Connection: keep-alive
     ```

### 4. **Server Processing**
   - The server receives the HTTP request, processes it, and determines what resources to send back. The server might need to access databases or files based on the request.
   - If the requested resource (like a webpage) is dynamic (e.g., generated by a server-side script), the server executes the script (such as PHP, Python, or Ruby), processes the logic, and creates the appropriate response.

### 5. **HTTP Response**
   - The server sends back an **HTTP response**, which contains the requested resource (like HTML, CSS, JavaScript, images) along with a status code indicating the result of the request.
     - If successful, the status code would be `200 OK`.
     - If the resource is not found, it would be a `404 Not Found`.
     - The response also includes headers with metadata about the resource, such as `Content-Type`, `Content-Length`, caching directives, etc.

     Example of an HTTP response:
     ```
     HTTP/1.1 200 OK
     Content-Type: text/html; charset=UTF-8
     Content-Length: 2345
     Connection: keep-alive
     <html>...</html>
     ```

### 6. **Rendering the Webpage**
   - Once the browser receives the HTTP response, it processes the HTML content (and other assets like CSS, JavaScript, images) and **renders the webpage** for you to see.
   - If the HTML references additional resources (like images, CSS, or JavaScript files), the browser will initiate additional HTTP requests to the server or other servers to fetch these resources.

### 7. **Closing the Connection**
   - After the data is transferred, the browser and the server typically close the TCP connection using a **TCP teardown**.
   - If the connection was made over HTTPS, the TLS session is also terminated at this point.
   - In some cases, the connection might remain open for further requests (HTTP Keep-Alive) to improve performance if multiple resources are needed.

---

### Summary of Steps:

1. **DNS resolution** (skipped if using direct IP).
2. **Establish TCP connection** (three-way handshake).
3. **Send HTTP request** to the server (browser sends resource request).
4. **Server processes the request** and prepares an HTTP response.
5. **Server sends HTTP response** (containing the resource).
6. **Browser renders the page** and processes additional resources if needed.
7. **Connection is closed** (or kept open for future requests).

This entire process happens extremely quickly (usually in milliseconds to seconds), allowing you to access websites by simply typing an IP address (or domain) into the browser's address bar.